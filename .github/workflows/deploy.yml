name: Deploy Docsify with Godot Demos to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: 🔄 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
        # Enable LFS for WASM files only
        lfs: true
    
    - name: 📦 Setup Git LFS and fetch WASM files
      run: |
        echo "📦 Setting up Git LFS..."
        git lfs version
        
        echo "🔍 Checking LFS files before pull..."
        git lfs ls-files
        
        echo "📥 Pulling LFS files (WASM and PCK)..."
        git lfs pull
        
        echo "✅ LFS files pulled successfully"
    
    - name: 🎮 Setup Godot Engine
      run: |
        echo "🎮 Setting up Godot Engine for CI builds..."
        
        # Download Godot 4.4.1 for Linux
        GODOT_VERSION="4.4.1-stable"
        GODOT_TEMPLATE_VERSION="4.4.1.stable"
        GODOT_URL="https://github.com/godotengine/godot-builds/releases/download/${GODOT_VERSION}/Godot_v${GODOT_VERSION}_linux.x86_64.zip"
        TEMPLATES_URL="https://github.com/godotengine/godot-builds/releases/download/${GODOT_VERSION}/Godot_v${GODOT_VERSION}_export_templates.tpz"
        
        echo "📥 Downloading Godot ${GODOT_VERSION}..."
        wget -q "${GODOT_URL}" -O godot.zip
        
        echo "📦 Extracting Godot..."
        unzip -q godot.zip
        
        # Make Godot executable and move to a standard location
        chmod +x Godot_v${GODOT_VERSION}_linux.x86_64
        sudo mv Godot_v${GODOT_VERSION}_linux.x86_64 /usr/local/bin/godot
        
        echo "📥 Downloading export templates..."
        wget -q "${TEMPLATES_URL}" -O export_templates.tpz
        
        echo "📦 Installing export templates..."
        mkdir -p ~/.local/share/godot/export_templates/${GODOT_TEMPLATE_VERSION}
        unzip -q export_templates.tpz -d ~/.local/share/godot/export_templates/
        mv ~/.local/share/godot/export_templates/templates/* ~/.local/share/godot/export_templates/${GODOT_TEMPLATE_VERSION}/
        rmdir ~/.local/share/godot/export_templates/templates
        
        echo "✅ Godot setup completed"
        godot --version
        
        echo "🔍 Verifying export templates..."
        ls -la ~/.local/share/godot/export_templates/${GODOT_TEMPLATE_VERSION}/
    
    - name: 🔨 Build Godot Export
      run: |
        echo "🔨 Building Godot project exports..."
        cd gdEmbed
        
        echo "🔍 Checking Godot installation and templates..."
        make check-godot
        
        echo "🔍 Checking project configuration..."
        make check-preset
        make status
        
        echo "🏗️ Building web export..."
        make ci-build
        
        echo "✅ Godot export build completed"
        
        echo "📊 Verifying built files..."
        ls -lh exports/web/
        
        # Verify the built files are properly sized
        if [ -f "exports/web/index.wasm" ]; then
          wasm_size=$(stat -c%s "exports/web/index.wasm")
          echo "✅ Built WASM file: $wasm_size bytes"
          if [ "$wasm_size" -lt 100000 ]; then
            echo "❌ Warning: WASM file seems too small!"
          fi
        else
          echo "❌ WASM file not generated!"
          exit 1
        fi
        
        if [ -f "exports/web/index.pck" ]; then
          pck_size=$(stat -c%s "exports/web/index.pck")
          echo "✅ Built PCK file: $pck_size bytes"
        else
          echo "❌ PCK file not generated!"
          exit 1
        fi
        
        if [ -f "exports/web/index.js" ]; then
          js_size=$(stat -c%s "exports/web/index.js")
          echo "✅ Built JS file: $js_size bytes"
          
          # Verify JS contains Engine class
          if grep -q "Engine" "exports/web/index.js"; then
            echo "✅ JavaScript contains Engine class"
          else
            echo "❌ JavaScript missing Engine class!"
            exit 1
          fi
        else
          echo "❌ JavaScript file not generated!"
          exit 1
        fi
        
        cd ..
        
        echo "🔄 Updating LFS tracked files with new builds..."
        git add gdEmbed/exports/web/index.wasm gdEmbed/exports/web/index.pck
        echo "✅ New builds ready for LFS tracking"
    
    - name: 🔍 Verify Godot files
      run: |
        echo "📊 Verifying freshly built Godot export files..."
        ls -lh gdEmbed/exports/web/ || echo "❌ Godot exports not found"
        
        echo "🔍 Checking critical files (post-build):"
        
        # Check WASM file (freshly built)
        if [ -f "gdEmbed/exports/web/index.wasm" ]; then
          file_size=$(stat -c%s "gdEmbed/exports/web/index.wasm" 2>/dev/null || stat -f%z "gdEmbed/exports/web/index.wasm")
          echo "📁 WASM file size: $file_size bytes"
          
          if [ "$file_size" -lt 100000 ]; then
            echo "❌ WASM file too small, might be corrupted"
            exit 1
          else
            echo "✅ WASM file looks good ($file_size bytes)"
          fi
        else
          echo "❌ WASM file not found"
          exit 1
        fi
        
        # Check PCK file (freshly built)
        if [ -f "gdEmbed/exports/web/index.pck" ]; then
          pck_size=$(stat -c%s "gdEmbed/exports/web/index.pck" 2>/dev/null || stat -f%z "gdEmbed/exports/web/index.pck")
          echo "📁 PCK file size: $pck_size bytes"
          
          if [ "$pck_size" -lt 1000 ]; then
            echo "❌ PCK file too small, might be corrupted"
            exit 1
          else
            echo "✅ PCK file looks good ($pck_size bytes)"
          fi
        else
          echo "❌ PCK file not found"
          exit 1
        fi
        
        # Check JavaScript file (freshly built)
        if [ -f "gdEmbed/exports/web/index.js" ]; then
          js_size=$(stat -c%s "gdEmbed/exports/web/index.js" 2>/dev/null || stat -f%z "gdEmbed/exports/web/index.js")
          echo "📁 JavaScript file size: $js_size bytes"
          
          # Check if it contains the Engine class
          if grep -q "Engine" "gdEmbed/exports/web/index.js"; then
            echo "✅ JavaScript file contains Engine class"
          else
            echo "❌ JavaScript file missing Engine class!"
            head -n 10 "gdEmbed/exports/web/index.js"
            exit 1
          fi
        else
          echo "❌ JavaScript file not found"
          exit 1
        fi
        
        echo "📂 All export files (freshly built):"
        find gdEmbed/exports/web/ -type f -exec ls -lh {} \;
    
    - name: 🛠️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
      if: hashFiles('package*.json') != ''
    
    - name: 📥 Install dependencies
      run: |
        if [ -f "package.json" ]; then
          npm ci
          echo "✅ Node.js dependencies installed"
        else
          echo "ℹ️  No package.json found, skipping npm install"
        fi
    
    - name: 🔧 Prepare deployment files
      run: |
        echo "🚀 Preparing files for deployment..."
        
        mkdir -p dist
        cp -r * dist/ 2>/dev/null || true
        touch dist/.nojekyll
        
        cat > dist/_headers << 'EOF'
        /*
          Cross-Origin-Embedder-Policy: require-corp
          Cross-Origin-Opener-Policy: same-origin
        
        /*.wasm
          Content-Type: application/wasm
          
        /*.pck
          Content-Type: application/octet-stream
          
        /*.js
          Content-Type: text/javascript
        EOF
        
        echo "📋 Verifying deployment files..."
        ls -la dist/
        
        echo "🎮 Checking Godot files in deployment:"
        ls -lh dist/gdEmbed/exports/web/ || echo "❌ Godot exports missing in dist"
        
        if [ -f "dist/gdEmbed/exports/web/index.wasm" ]; then
          wasm_size=$(stat -c%s "dist/gdEmbed/exports/web/index.wasm" 2>/dev/null || stat -f%z "dist/gdEmbed/exports/web/index.wasm")
          echo "✅ WASM file in dist: $wasm_size bytes"
        else
          echo "❌ WASM file missing in dist directory"
          exit 1
        fi
        
        if [ -f "dist/gdEmbed/exports/web/index.pck" ]; then
          pck_size=$(stat -c%s "dist/gdEmbed/exports/web/index.pck" 2>/dev/null || stat -f%z "dist/gdEmbed/exports/web/index.pck")
          echo "✅ PCK file in dist: $pck_size bytes"
        else
          echo "❌ PCK file missing in dist directory"
          exit 1
        fi
    
    - name: 🔍 Debug information
      run: |
        echo "🐛 Debug information:"
        echo "Current directory contents:"
        ls -la
        
        echo "Git status:"
        git status --porcelain
        
        echo "Submodule status:"
        git submodule status
    
    - name: 📄 Setup GitHub Pages
      uses: actions/configure-pages@v4
    
    - name: 📤 Upload artifact to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: 'dist'
    
    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: ✅ Deployment Summary
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "🌐 Site URL: ${{ steps.deployment.outputs.page_url }}"
        echo "📊 Deployment details:"
        echo "  - Repository: ${{ github.repository }}"
        echo "  - Branch: ${{ github.ref_name }}"
        echo "  - Commit: ${{ github.sha }}"
        echo "  - Workflow: ${{ github.workflow }}"
