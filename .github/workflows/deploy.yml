name: Deploy Docsify with Godot Demos to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_godot:
        description: 'Build Godot projects (enabled by default for server builds)'
        required: false
        default: true
        type: boolean
      godot_projects:
        description: 'Comma-separated list of Godot project folders to build'
        required: false
        default: 'gdEmbed'
        type: string

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  # Default Godot projects to build if not specified in workflow_dispatch
  DEFAULT_GODOT_PROJECTS: "gdEmbed"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: üîÑ Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
        # Enable LFS for WASM files only
        lfs: true
    
    - name: üì¶ Setup Git LFS and fetch WASM files
      run: |
        echo "üì¶ Setting up Git LFS..."
        git lfs version
        
        echo "üîç Checking LFS files before pull..."
        git lfs ls-files
        
        echo "üì• Pulling LFS files (WASM and PCK)..."
        git lfs pull
        
        echo "‚úÖ LFS files pulled successfully"
    
    - name: üéÆ Setup Godot Engine
      if: ${{ github.event.inputs.build_godot != 'false' }}
      run: |
        echo "üéÆ Setting up Godot Engine for CI builds..."
        
        # Download Godot 4.4.1 for Linux
        GODOT_VERSION="4.4.1-stable"
        GODOT_TEMPLATE_VERSION="4.4.1.stable"
        GODOT_URL="https://github.com/godotengine/godot-builds/releases/download/${GODOT_VERSION}/Godot_v${GODOT_VERSION}_linux.x86_64.zip"
        TEMPLATES_URL="https://github.com/godotengine/godot-builds/releases/download/${GODOT_VERSION}/Godot_v${GODOT_VERSION}_export_templates.tpz"
        
        echo "üì• Downloading Godot ${GODOT_VERSION}..."
        wget -q "${GODOT_URL}" -O godot.zip
        
        echo "üì¶ Extracting Godot..."
        unzip -q godot.zip
        
        # Make Godot executable and move to a standard location
        chmod +x Godot_v${GODOT_VERSION}_linux.x86_64
        sudo mv Godot_v${GODOT_VERSION}_linux.x86_64 /usr/local/bin/godot
        
        echo "üì• Downloading export templates..."
        wget -q "${TEMPLATES_URL}" -O export_templates.tpz
        
        echo "üì¶ Installing export templates..."
        mkdir -p ~/.local/share/godot/export_templates/${GODOT_TEMPLATE_VERSION}
        unzip -q export_templates.tpz -d ~/.local/share/godot/export_templates/
        mv ~/.local/share/godot/export_templates/templates/* ~/.local/share/godot/export_templates/${GODOT_TEMPLATE_VERSION}/
        rmdir ~/.local/share/godot/export_templates/templates
        
        echo "‚úÖ Godot setup completed"
        godot --version
        
        echo "üîç Verifying export templates..."
        ls -la ~/.local/share/godot/export_templates/${GODOT_TEMPLATE_VERSION}/
        
        echo "üßπ Cleaning up downloaded files..."
        rm -f godot.zip export_templates.tpz
        echo "‚úÖ Cleanup completed"
    
    - name: üî® Build Godot Export
      if: ${{ github.event.inputs.build_godot != 'false' }}
      run: |
        echo "üî® Building Godot project exports..."
        
        # Determine which projects to build
        if [ -n "${{ github.event.inputs.godot_projects }}" ]; then
          GODOT_PROJECTS="${{ github.event.inputs.godot_projects }}"
        else
          GODOT_PROJECTS="${DEFAULT_GODOT_PROJECTS}"
        fi
        
        echo "üìÅ Projects to build: $GODOT_PROJECTS"
        
        # Convert comma-separated list to array
        IFS=',' read -ra PROJECT_ARRAY <<< "$GODOT_PROJECTS"
        
        # Build each project
        for project in "${PROJECT_ARRAY[@]}"; do
          # Trim whitespace
          project=$(echo "$project" | xargs)
          
          echo ""
          echo "üéØ Building project: $project"
          echo "=================================="
          
          if [ ! -d "$project" ]; then
            echo "‚ùå Project directory '$project' not found!"
            ls -la
            exit 1
          fi
          
          cd "$project"
          
          # Check if project has a Makefile
          if [ ! -f "Makefile" ]; then
            echo "‚ùå No Makefile found in '$project' - skipping"
            cd ..
            continue
          fi
          
          # Check if project has Godot files
          if [ ! -f "project.godot" ]; then
            echo "‚ùå No project.godot found in '$project' - skipping"
            cd ..
            continue
          fi
          
          echo "üîç Checking Godot installation and templates..."
          make check-godot
          
          echo "üîç Checking project configuration..."
          make check-preset
          make status
          
          echo "üèóÔ∏è Building web export..."
          make ci-build
          
          echo "‚úÖ Godot export build completed for $project"
          
          echo "üìä Verifying built files..."
          ls -lh exports/web/
          
          # Verify the built files are properly sized
          if [ -f "exports/web/index.wasm" ]; then
            wasm_size=$(stat -c%s "exports/web/index.wasm")
            echo "‚úÖ Built WASM file: $wasm_size bytes"
            if [ "$wasm_size" -lt 100000 ]; then
              echo "‚ùå Warning: WASM file seems too small!"
            fi
          else
            echo "‚ùå WASM file not generated!"
            exit 1
          fi
          
          if [ -f "exports/web/index.pck" ]; then
            pck_size=$(stat -c%s "exports/web/index.pck")
            echo "‚úÖ Built PCK file: $pck_size bytes"
          else
            echo "‚ùå PCK file not generated!"
            exit 1
          fi
          
          if [ -f "exports/web/index.js" ]; then
            js_size=$(stat -c%s "exports/web/index.js")
            echo "‚úÖ Built JS file: $js_size bytes"
            
            # Verify JS contains Engine class
            if grep -q "Engine" "exports/web/index.js"; then
              echo "‚úÖ JavaScript contains Engine class"
            else
              echo "‚ùå JavaScript missing Engine class!"
              exit 1
            fi
          else
            echo "‚ùå JavaScript file not generated!"
            exit 1
          fi
          
          echo "üîÑ Updating LFS tracked files with new builds..."
          git add exports/web/index.wasm exports/web/index.pck
          echo "‚úÖ New builds ready for LFS tracking for $project"
          
          cd ..
        done
        
        echo ""
        echo "üìä Disk usage before cleanup:"
        du -sh ~/.local/share/godot/ 2>/dev/null || echo "No Godot directory found"
        ls -lh /usr/local/bin/godot 2>/dev/null || echo "No Godot executable found"
        
        echo "üßπ Cleaning up build tools to reduce artifact size..."
        sudo rm -f /usr/local/bin/godot
        rm -rf ~/.local/share/godot/export_templates/
        
        echo "üìä Disk usage after cleanup:"
        du -sh ~/.local/share/godot/ 2>/dev/null || echo "Godot directory cleaned"
        ls -lh /usr/local/bin/godot 2>/dev/null || echo "Godot executable cleaned"
        
        echo "‚úÖ Build tools cleanup completed"
        echo "üéâ All Godot projects built successfully!"
    
    - name: üîç Verify Godot files
      if: ${{ github.event.inputs.build_godot != 'false' }}
      run: |
        echo "üìä Verifying freshly built Godot export files..."
        
        # Determine which projects were built
        if [ -n "${{ github.event.inputs.godot_projects }}" ]; then
          GODOT_PROJECTS="${{ github.event.inputs.godot_projects }}"
        else
          GODOT_PROJECTS="${DEFAULT_GODOT_PROJECTS}"
        fi
        
        echo "üìÅ Verifying projects: $GODOT_PROJECTS"
        
        # Convert comma-separated list to array
        IFS=',' read -ra PROJECT_ARRAY <<< "$GODOT_PROJECTS"
        
        # Verify each project
        for project in "${PROJECT_ARRAY[@]}"; do
          # Trim whitespace
          project=$(echo "$project" | xargs)
          
          echo ""
          echo "üîç Verifying project: $project"
          echo "=================================="
          
          ls -lh "$project/exports/web/" || echo "‚ùå Godot exports not found for $project"
          
          echo "üîç Checking critical files (post-build) for $project:"
          
          # Check WASM file (freshly built)
          if [ -f "$project/exports/web/index.wasm" ]; then
            file_size=$(stat -c%s "$project/exports/web/index.wasm" 2>/dev/null || stat -f%z "$project/exports/web/index.wasm")
            echo "üìÅ WASM file size: $file_size bytes"
            
            if [ "$file_size" -lt 100000 ]; then
              echo "‚ùå WASM file too small, might be corrupted"
              exit 1
            else
              echo "‚úÖ WASM file looks good ($file_size bytes)"
            fi
          else
            echo "‚ùå WASM file not found for $project"
            exit 1
          fi
          
          # Check PCK file (freshly built)
          if [ -f "$project/exports/web/index.pck" ]; then
            pck_size=$(stat -c%s "$project/exports/web/index.pck" 2>/dev/null || stat -f%z "$project/exports/web/index.pck")
            echo "üìÅ PCK file size: $pck_size bytes"
            
            if [ "$pck_size" -lt 1000 ]; then
              echo "‚ùå PCK file too small, might be corrupted"
              exit 1
            else
              echo "‚úÖ PCK file looks good ($pck_size bytes)"
            fi
          else
            echo "‚ùå PCK file not found for $project"
            exit 1
          fi
          
          # Check JavaScript file (freshly built)
          if [ -f "$project/exports/web/index.js" ]; then
            js_size=$(stat -c%s "$project/exports/web/index.js" 2>/dev/null || stat -f%z "$project/exports/web/index.js")
            echo "üìÅ JavaScript file size: $js_size bytes"
            
            # Check if it contains the Engine class
            if grep -q "Engine" "$project/exports/web/index.js"; then
              echo "‚úÖ JavaScript file contains Engine class"
            else
              echo "‚ùå JavaScript file missing Engine class!"
              head -n 10 "$project/exports/web/index.js"
              exit 1
            fi
          else
            echo "‚ùå JavaScript file not found for $project"
            exit 1
          fi
          
          echo "üìÇ All export files for $project (freshly built):"
          find "$project/exports/web/" -type f -exec ls -lh {} \;
        done
        
        echo ""
        echo "‚úÖ All Godot projects verified successfully!"
    
    - name: üîß Prepare deployment files
      run: |
        echo "üöÄ Preparing files for deployment..."
        
        mkdir -p dist
        cp -r * dist/ 2>/dev/null || true
        touch dist/.nojekyll
        
        cat > dist/_headers << 'EOF'
        /*
          Cross-Origin-Embedder-Policy: require-corp
          Cross-Origin-Opener-Policy: same-origin
        
        /*.wasm
          Content-Type: application/wasm
          
        /*.pck
          Content-Type: application/octet-stream
          
        /*.js
          Content-Type: text/javascript
        EOF
        
        echo "üìã Verifying deployment files..."
        ls -la dist/
        
        # Only verify Godot files if they were built
        if [ "${{ github.event.inputs.build_godot }}" != "false" ]; then
          # Determine which projects were built
          if [ -n "${{ github.event.inputs.godot_projects }}" ]; then
            GODOT_PROJECTS="${{ github.event.inputs.godot_projects }}"
          else
            GODOT_PROJECTS="${DEFAULT_GODOT_PROJECTS}"
          fi
          
          echo "üéÆ Checking Godot files in deployment for projects: $GODOT_PROJECTS"
          
          # Convert comma-separated list to array
          IFS=',' read -ra PROJECT_ARRAY <<< "$GODOT_PROJECTS"
          
          # Verify each project in deployment
          for project in "${PROJECT_ARRAY[@]}"; do
            # Trim whitespace
            project=$(echo "$project" | xargs)
            
            echo ""
            echo "üîç Verifying deployment for project: $project"
            
            ls -lh "dist/$project/exports/web/" || echo "‚ùå Godot exports missing in dist for $project"
            
            if [ -f "dist/$project/exports/web/index.wasm" ]; then
              wasm_size=$(stat -c%s "dist/$project/exports/web/index.wasm" 2>/dev/null || stat -f%z "dist/$project/exports/web/index.wasm")
              echo "‚úÖ WASM file in dist for $project: $wasm_size bytes"
            else
              echo "‚ùå WASM file missing in dist directory for $project"
              exit 1
            fi
            
            if [ -f "dist/$project/exports/web/index.pck" ]; then
              pck_size=$(stat -c%s "dist/$project/exports/web/index.pck" 2>/dev/null || stat -f%z "dist/$project/exports/web/index.pck")
              echo "‚úÖ PCK file in dist for $project: $pck_size bytes"
            else
              echo "‚ùå PCK file missing in dist directory for $project"
              exit 1
            fi
          done
          
          echo ""
          echo "‚úÖ All Godot projects verified in deployment!"
        else
          echo "üì¶ Using existing Godot files from Git LFS (Godot build disabled)"
          
          # Just verify that the WASM files exist from LFS
          find dist/ -name "*.wasm" -exec ls -lh {} \; || echo "üìù No WASM files found (normal if using LFS)"
          find dist/ -name "*.pck" -exec ls -lh {} \; || echo "üìù No PCK files found (normal if using LFS)"
        fi

    - name: üìö Run documentation tools
      run: |
        echo "üìö Running docsh documentation tools..."
        
        # Check if docsh directory exists
        if [ ! -d "docsh" ]; then
          echo "‚ùå docsh directory not found, skipping documentation generation"
          exit 0
        fi
        
        # Check if autorun.sh exists
        if [ ! -f "docsh/autorun.sh" ]; then
          echo "‚ùå docsh/autorun.sh not found, skipping documentation generation"
          exit 0
        fi
        
        # Make autorun.sh executable
        chmod +x docsh/autorun.sh
        
        # Run the documentation tools
        echo "üîÑ Executing docsh/autorun.sh..."
        bash docsh/autorun.sh
        
        echo "‚úÖ Documentation tools completed successfully!"

    - name: üîç Debug information
      run: |
        echo "üêõ Debug information:"
        echo "Current directory contents:"
        ls -la
        
        echo "Git status:"
        git status --porcelain
        
        echo "Submodule status:"
        git submodule status
    
    - name: üìÑ Setup GitHub Pages
      uses: actions/configure-pages@v4
    
    - name: üì§ Upload artifact to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: 'dist'
    
    - name: üöÄ Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: ‚úÖ Deployment Summary
      run: |
        echo "üéâ Deployment completed successfully!"
        echo "üåê Site URL: ${{ steps.deployment.outputs.page_url }}"
        echo "üìä Deployment details:"
        echo "  - Repository: ${{ github.repository }}"
        echo "  - Branch: ${{ github.ref_name }}"
        echo "  - Commit: ${{ github.sha }}"
        echo "  - Workflow: ${{ github.workflow }}"
        echo "  - Godot Build: ${{ github.event.inputs.build_godot || 'false' }}"
        
        # Show information based on whether Godot was built
        if [ "${{ github.event.inputs.build_godot }}" != "false" ]; then
          # Show which projects were built
          if [ -n "${{ github.event.inputs.godot_projects }}" ]; then
            GODOT_PROJECTS="${{ github.event.inputs.godot_projects }}"
            echo "  - Built projects (manual): $GODOT_PROJECTS"
          else
            echo "  - Built projects (default): ${DEFAULT_GODOT_PROJECTS}"
          fi
          
          echo ""
          echo "üéÆ Godot projects built and deployed:"
          # Convert comma-separated list to array
          PROJECTS="${{ github.event.inputs.godot_projects }}"
          if [ -z "$PROJECTS" ]; then
            PROJECTS="${DEFAULT_GODOT_PROJECTS}"
          fi
        else
          echo "  - Using existing builds from Git LFS (build disabled)"
          echo ""
          echo "üì¶ Godot projects deployed from LFS:"
          PROJECTS="${DEFAULT_GODOT_PROJECTS}"
        fi
        fi
        
        IFS=',' read -ra PROJECT_ARRAY <<< "$PROJECTS"
        for project in "${PROJECT_ARRAY[@]}"; do
          project=$(echo "$project" | xargs)
          echo "  - $project: ${{ steps.deployment.outputs.page_url }}$project/exports/web/"
        done
